# coding: utf-8

import tensorflow as tf
import numpy as np
from data.data_loader_wordlevel import read_vocab,read_category,batch_iter,process_file,build_vocab, get_maxlength, open_file
from data.word2vec_helper import embedding_sentences



class TCLSTMConfig(object):
    """CNN配置参数"""

    embedding_dim = 100  # 词向量维度
    seq_length = 600  # 序列长度
    num_classes = 2  # 类别数
    # num_filters = 100  # 卷积核数目
    num_filters = 128  # 卷积核数目
    # hidden_size = 3 * 100  # 隐态维度，应当是卷积核种类数*每种种类的数量
    hidden_size = 1 * 128  # 隐态维度，应当是卷积核种类数*每种种类的数量
    # num_filters = 256  # 卷积核数目
    kernel_sizes = "5"  # 卷积核尺寸
    # kernel_sizes = "3,4,5"  # 卷积核尺寸  因为是词语级别所以尺寸适当小一点
    # vocab_size = 8000  # 词汇表达小
    vocab_size = 100000  # 词汇表达小

    rnn = 'gru'

    hidden_dim_0 = 64
    hidden_dim = 128  # 全连接层神经元

    num_layers_for_rnn = 1  # rnn的层数，这里设置成2


    dropout_keep_prob = 0.8  # dropout保留比例
    learning_rate = 1e-3  # 学习率

    batch_size = 64  # 每批训练大小
    num_epochs = 250  # 总迭代轮次

    print_per_batch = 50  # 每多少轮输出一次结果
    save_per_batch = 10  # 每多少轮存入tensorboard

    weight = []

class TextCLSTM(object):
    """Text Classification，C-LSTM"""

    def __init__(self, config):
        self.config = config

        # 三个待输入的数据
        self.input_x = tf.placeholder(tf.int32, [None, self.config.seq_length], name='input_x')
        # 试一下非等长输入？
        # self.input_x = tf.placeholder(tf.int32, [None, None], name='input_x')
        self.input_y = tf.placeholder(tf.float32, [None, self.config.num_classes], name='input_y')
        self.keep_prob = tf.placeholder(tf.float32, name='keep_prob')
        self.sequence_length_vector = tf.placeholder(dtype=tf.int32, shape=[None], name='sequence_length_vector')

        self.alphabet = "abcdefghijklmnopqrstuvwxyz0123456789-,;.!?:'\"/\\|_@#$%^&*~`+-=<>()[]{}"
        filters_for_hidden = str(self.config.kernel_sizes).split(',')
        self.config.hidden_size = len(filters_for_hidden) * self.config.num_filters

        # rnn need a sequence_length of a vector of length batch_size

        # self.sequence_length_vector = [self.config.seq_length for x in \
        #                                range(self.config.num_layers_for_rnn * self.config.batch_size)]

        self.clstm()

    def clstm(self):
        """C-LSTM模型"""
        def lstm_cell():  # lstm核
            return tf.contrib.rnn.BasicLSTMCell(self.config.hidden_size, state_is_tuple=True)

        def gru_cell():  # gru核
            return tf.contrib.rnn.GRUCell(self.config.hidden_size)

        def dropout():  # 为每一个rnn核后面加一个dropout层
            if (self.config.rnn == 'lstm'):
                cell = lstm_cell()
            else:
                cell = gru_cell()
            return tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=self.config.dropout_keep_prob)

        # embedding_w = np.array(self.config.weight, dtype='float32')
        with tf.device('/gpu:0'), tf.name_scope("embedding"):
            embedding = tf.get_variable('embedding', [self.config.vocab_size, self.config.embedding_dim])
            # embedding_array, _ = self.onehot_dic_build()
            # embedding = tf.convert_to_tensor(embedding_w)
            # embedding = tf.get_variable("embedding_update", shape=[self.config.vocab_size, self.config.embedding_dim],
            #                             initializer=tf.constant_initializer(embedding_w), trainable=False)
            # embedding_notrain = tf.get_variable("embedding_weight", embedding, trainable=False)

            self.embedding_inputs = tf.nn.embedding_lookup(embedding, self.input_x)
        # with tf.name_scope("embedding-update"):
        #     self.embedding_update = tf.layers.dense(self.embedding_inputs, self.config.embedding_dim, name='embedding_updating')

        # 多类型卷积核
        max_feature_length = self.config.seq_length - 5 + 1
        pooled_outputs = []
        filters = str(self.config.kernel_sizes).split(',')
        for filter_size in filters:
            # each conv-pool
            scope_name = str('conv-maxpool-%s' % filter_size)
            with tf.device('/gpu:0'),tf.name_scope(scope_name):
                # convolution i
                conv = tf.layers.conv1d(inputs=self.embedding_inputs, filters=self.config.num_filters,
                                        kernel_size=int(filter_size), name='conv%s' % filter_size)
                # 新加激活层试试看？
                conv = tf.nn.relu(conv)
                h_reshape = conv[:,:max_feature_length,:]
                # max pooling
                # (?, 100)
                # ******************************************************************************
                # there is no need to get max or k-max pooling in c-lstm
                # gmp = tf.reduce_max(conv, reduction_indices=[1], name='gmp%s' % filter_size)
                # ******************************************************************************
                # gmp, index_gmp = tf.nn.top_k(conv, 5)
                # shape_beforemean = gmp.get_shape().as_list()
                # print(shape_beforemean)
                # gmp = tf.reduce_mean(gmp, 2)
                # shape_aftermin = gmp.get_shape().as_list()
                # print(shape_aftermin)
                # shape_to_flat = tf.shape(gmp)
                # shape_to_flat = gmp.get_shape().as_list()
                # gmp = tf.reshape(gmp, [-1, shape_to_flat[1] * 3])
            pooled_outputs.append(h_reshape)
            # pooled_outputs.append(gmp)
        
        # combine
        num_filters_total = self.config.num_filters * len(filters)
        # self.pool = tf.concat(pooled_outputs, 1)
        filters_pattern = str(self.config.kernel_sizes).split(',')
        if len(filters_pattern) > 1:
            rnn_input = tf.concat(pooled_outputs, -1)
        else:
            rnn_input = conv
        # no need to flat



        # *************************************************************************************************************
        # the part of rnn --- lstm/gru
        # with tf.device('/cpu:0'),tf.name_scope("rnn"):
        #     cells = [dropout() for _ in range(self.config.num_layers_for_rnn)]
        #     rnn_cell = tf.contrib.rnn.MultiRNNCell(cells, state_is_tuple=True)
        #     _outputs, _state = tf.nn.dynamic_rnn(cell=rnn_cell, inputs=self.embedding_inputs, dtype=tf.float32)
        #     self.final_state = _state
        #     self.final_output = _outputs
        # *************************************************************************************************************
        # bi-direction
        with tf.device('/gpu:0'),tf.name_scope("rnn"):
            cells_fw = [dropout() for _ in range(self.config.num_layers_for_rnn)]
            cells_bw = [dropout() for _ in range(self.config.num_layers_for_rnn)]
            rnn_cell_fw = tf.contrib.rnn.MultiRNNCell(cells_fw, state_is_tuple=True)
            rnn_cell_bw = tf.contrib.rnn.MultiRNNCell(cells_bw, state_is_tuple=True)
            _outputs, _state = tf.nn.bidirectional_dynamic_rnn(rnn_cell_fw,rnn_cell_bw, inputs=rnn_input, dtype=tf.float32)
            self.final_state = _state
            self.final_output = tf.concat(_outputs,2)
        # *************************************************************************************************************



        # cell = tf.contrib.rnn.LSTMCell(self.config.hidden_size,
        #                                forget_bias=1.0,
        #                                state_is_tuple=True,
        #                                reuse=tf.get_variable_scope().reuse)
        # dropout
        # cell = tf.contrib.rnn.DropoutWrapper(cell,output_keep_prob=self.config.dropout_keep_prob)
        #
        # # Stacked LSTM
        # cell = tf.contrib.rnn.MultiRNNCell([cell]*self.config.num_layers_for_rnn, state_is_tuple=True)
        #
        # self._initial_state = cell.zero_state(self.config.batch_size, dtype=tf.float32)
        #
        # # Feed the CNN outputs to LSTM network
        # with tf.device('/cpu:0'),tf.variable_scope('LSTM'):
        #     # outputs, state = tf.nn.dynamic_rnn(cell,
        #     #                                    rnn_input,
        #     #                                    initial_state=self._initial_state,
        #     #                                    sequence_length=self.sequence_length_vector)
        #     outputs, state = tf.nn.dynamic_rnn(cell,
        #                                        rnn_input,
        #                                        initial_state=self._initial_state,
        #                                        sequence_length=self.sequence_length_vector)
        #     self.final_state = state

        with tf.device('/gpu:0'),tf.name_scope("score"):
            # 全连接层，后面接dropout以及relu激活
            # last = self.final_output[:, -1, :]  # 取最后一个时序输出作为结果
            last = tf.reduce_mean(self.final_output, 1)  # 取所有时刻输出的平均
            fc = tf.layers.dense(last, self.config.hidden_dim,name='fc1')
            # fc = tf.layers.dense(self.final_state[self.config.num_layers_for_rnn-1].h, self.config.hidden_dim, name='fc1')
            fc = tf.contrib.layers.dropout(fc, self.keep_prob)
            fc = tf.nn.relu(fc)

            # 分类器
            self.logits = tf.layers.dense(fc, self.config.num_classes, name='fc2')
            self.y_pred_cls = tf.argmax(tf.nn.softmax(self.logits), 1)  # 预测类别

        with tf.name_scope("optimize"):
            # 损失函数，交叉熵
            cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=self.logits, labels=self.input_y)
            self.loss = tf.reduce_mean(cross_entropy)
            # 优化器
            self.optim = tf.train.AdamOptimizer(learning_rate=self.config.learning_rate).minimize(self.loss)

        with tf.name_scope("accuracy"):
            # 准确率
            correct_pred = tf.equal(tf.argmax(self.input_y, 1), self.y_pred_cls)
            self.acc = tf.reduce_mean(tf.cast(correct_pred, tf.float32))
